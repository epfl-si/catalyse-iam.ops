- tags: always
  include_vars: erm-reverse-proxy-vars.yml

- name: 'erm-proxy build secret #1: `git clone` credentials'
  openshift:
    state: latest
    apiVersion: v1
    kind: Secret
    metadata:
      name: ssh-key-for-erm-proxy-git-clone
      namespace: '{{ openshift_namespace }}'
    type: kubernetes.io/ssh-auth
    data:
      ssh-privatekey: '{{ _id_rsa | b64encode }}'
      known_hosts: '{{ _known_hosts | b64encode }}'
  vars:
    # Be sure that `_id_rsa` ends with a newline, lest OpenShift silently fail
    # to use it!
    _id_rsa: |
      {{ lookup("pipe", "keybase fs read {{ erm_ssh_secret_key_path }}/id_rsa") }}

    _known_hosts: '{{ lookup("pipe", "ssh-keyscan github.com 2>/dev/null | sort") }}'
  when:
    - >-
      inventory_environment == "test"
  register: _erm_proxy_build_secret_1
  tags:
    - erm.build

- name: 'erm-proxy build secret #2: Docker Hub credentials'
  openshift:
    state: latest
    apiVersion: v1
    kind: Secret
    metadata:
      name: docker-hub-credentials
      namespace: '{{ openshift_namespace }}'
    type: kubernetes.io/dockerconfigjson
    data:
      .dockerconfigjson: "{{ _docker_auths_dict | to_json | b64encode }}"
  vars:
    _docker_auths_dict:
      # https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      auths:
        "https://index.docker.io/v1/":
          "auth": "{{ _loginpassword | b64encode }}"
    _loginpassword: "{{ _epflclonebot_secrets.username }}:{{ _epflclonebot_secrets.password }}"
    _epflclonebot_secrets: >-
      {{ lookup("pipe", "keybase fs read {{ erm_docker_clone_credentials_path }}") | from_yaml }}
  when:
    - >-
      inventory_environment == "test"
  register: _erm_proxy_build_secret_2
  tags:
    - erm.build

- name: "`oc secrets link` into the {{ _builder_service_account }} service account"
  shell:
    cmd: |
      set -e -x
      case "$(oc -n {{ openshift_namespace }} get -o yaml \
                 serviceaccount {{ _builder_service_account }})" in
        *"- name: {{ _docker_hub_secret_name }}"*)
          echo "ALREADY_LINKED"
          exit 0;;
        *)
        oc -n {{ openshift_namespace }} secrets link {{ _builder_service_account }} {{ _docker_hub_secret_name }} --for=pull
      esac
  vars:
    _docker_hub_secret_name: docker-hub-credentials
    _builder_service_account: builder  # And not `default`, as incorrectly blogged about
  register: _oc_secrets_link
  changed_when: >-
    _oc_secrets_link
    and
    ( "ALREADY_LINKED" not in _oc_secrets_link.stdout )

- name: Build in OpenShift
  # Build in test only (and promote to production):
  when: >-
    inventory_environment == "test"
  openshift_imagestream:
    state: latest
    metadata:
      namespace: "{{ openshift_namespace }}"
      name: "{{ erm_image_name }}"
    git:
      repository: "{{ erm_git_uri }}"
    spec:
      source:
        sourceSecret:
          name: "ssh-key-for-erm-proxy-git-clone"
      resources:
        limits:
          cpu: '1'
          memory: 100M
  register: _erm_imagestream

- name: Re-build now in OpenShift
  shell:
    cmd: "oc -n {{ openshift_namespace }} start-build --wait {{ erm_image_name }}"
  register: "_build_id"
  when:
    - >
      ( (_erm_imagestream | default({})) is changed )
      or
      ( (_erm_proxy_build_secret_1 | default({})) is changed )
      or
      ( (_erm_proxy_build_secret_2 | default({})) is changed )
      or
      ( (_oc_secrets_link | default({})) is changed )
      or
      "erm.build" in ansible_run_tags
    - >-
      inventory_environment == "test"
  tags:
    - erm.rebuild
