# Deploy Satosa and dependencies (configuration file, secrets) to OpenShift
- tags: all
  include_vars: sativa-vars.yml

- name: ConfigMap for Satosa
  openshift:
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: satosa
      namespace: "{{ openshift_namespace }}"
    data:
      proxy_conf.yaml: >-
        {{ lookup("template", "proxy_conf.yaml") }}
      saml2_backend.yaml: >-
        {{ lookup("template", "saml2_backend.yaml") }}
      saml2_frontend.yaml: >-
        {{ lookup("template", "saml2_frontend.yaml") }}
      internal_attributes.yaml: >-
        {{ lookup("template", "internal_attributes.yaml") }}
      static_attributes.yaml: >-
        {{ lookup("template", "static_attributes.yaml") }}
      # The SP credentials for the “catalyse-test-proj” Catalyse instance:
      ivalua-sp.xml: >-
        {{ lookup("template", "ivalua-sp--catalyse.xml" if inventory_environment == "prod"
                               else "ivalua-sp--catalyse-test-proj.xml" ) }}
      ivalua_account_activation_microservice.yaml: >-
        {{ lookup("template", "ivalua_account_activation_microservice.yaml") }}
      ivalua_account_activation_microservice.py: >-
        {{ lookup("template", "ivalua_account_activation_microservice.py") }}
  register: _satosa_configmap

- name: API client Secret for Satosa
  openshift:
    apiVersion: v1
    kind: Secret
    metadata:
      name: satosa-runtime-secrets
      namespace: "{{ openshift_namespace }}"
    data:
      secrets.json: >-
        {{ _secrets_json | to_json | b64encode }}
      SATOSA_STATE_ENCRYPTION_KEY: >-
        {{ satosa_secrets.satosa_state_encryption_key | b64encode }}
  register: _satosa_secret
  vars:
    _secrets_json:
      websrv_password: "{{ satosa_secrets.websrv_api.password }}"
      catalyse_key: "{{ satosa_secrets.catalyse_api.key }}"

- name: Generate keypair for SATOSA (in case we need one)
  changed_when: false
  delegate_to: localhost
  shell:
    cmd: |
      openssl req -batch -x509 -subj '/CN={{ sativa_server_hostname }}' -new -nodes -out /dev/stdout -keyout /dev/stdout 2>/dev/null
  register: _openssl_new_keypair

- name: X509 self-signed certificate and key for SATOSA
  openshift:
    state: present
    apiVersion: v1
    kind: Secret
    metadata:
      name: satosa-certificate
      namespace: "{{ openshift_namespace }}"
    type: Opaque
    data:
      metadata.key: '{{ _openssl_key | b64encode }}'
      metadata.crt: '{{ _openssl_cert | b64encode }}'
      frontend.key: '{{ _openssl_key | b64encode }}'
      frontend.crt: '{{ _openssl_cert | b64encode }}'
      backend.key: '{{ _openssl_key | b64encode }}'
      backend.crt: '{{ _openssl_cert | b64encode }}'
  vars:
    _openssl_key: >-
      {{ _openssl_new_keypair.stdout | extract_private_key }}
    _openssl_cert: >-
      {{ _openssl_new_keypair.stdout | extract_certificate }}

- name: Tequila's certificate (protects the SAML2 .xml config download)
  openshift:
    apiVersion: v1
    kind: Secret
    metadata:
      name: tequila-certificate
      namespace: "{{ openshift_namespace }}"
    type: Opaque
    data:
      tequila.pem: '{{ _tequila_cert | b64encode }}'
  vars:
    _tequila_cert: >-
      {{ lookup("pipe",
      "
      openssl s_client -showcerts -connect {{ sativa_tequila_server }}:443 </dev/null 2>/dev/null |
      sed -n '/^-----BEGIN CERTIFICATE-----/,/^-----END CERTIFICATE-----/p;/^-----END CERTIFICATE-----/q'
      ")}}

- name: DeploymentConfig for Satosa
  openshift:
    apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: '{{ sativa_deploy_name }}'
      namespace: '{{ openshift_namespace }}'
      labels:
        app: satosa-proxy
    spec:
      replicas: 1
      selector:
        deployment-config.name: '{{ sativa_deploy_name }}'
      # `strategy:` configures resources and other parameters for
      # the upgrade process.
      strategy:
        resources:
          limits:
            memory: 100Mi
      template:
        metadata:
          labels:
            deployment-config.name: '{{ sativa_deploy_name }}'
        spec:
          containers:
            - name: satosa
              image: "{{ satosa_image }}"
              ports:
                - containerPort: 8000
                  protocol: "TCP"
              resources:
                limits:
                  memory: 100Mi
                requests:
                  memory: 50Mi
              volumeMounts:
                - name: satosa-config
                  mountPath: "{{ satosa_configmap_mountpoint }}"
                - name: satosa-runtime-secrets
                  mountPath: "{{ satosa_secrets_mountpoint }}"
                - name: satosa-etc
                  mountPath: /opt/satosa/etc
                - name: satosa-certificate
                  mountPath: /opt/satosa/ssl
                - name: tequila-certificate
                  mountPath: /opt/satosa/tequila
              env:
                - name: DATA_DIR
                  value: /opt/satosa/etc
                - name: SATOSA_STATE_ENCRYPTION_KEY
                  valueFrom:
                    secretKeyRef:
                      name: satosa-runtime-secrets
                      key: SATOSA_STATE_ENCRYPTION_KEY
              command:
                - bash
                - -x
                - -c
                - |-
                  ln -s /opt/satosa/config/* /opt/satosa/etc/
                  ln -s /opt/satosa/ssl/* /opt/satosa/etc/
                  exec bash -x /start.sh
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /SAML-of-Catalyse/proxy.xml
                  port: 8000
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 60
                successThreshold: 1
                timeoutSeconds: 10
          volumes:
            - name: satosa-config
              configMap:
                name: satosa
            - name: satosa-etc
              emptyDir: {}
            - name: satosa-certificate
              secret:
                secretName: satosa-certificate
            - name: tequila-certificate
              secret:
                secretName: tequila-certificate
            - name: satosa-runtime-secrets
              secret:
                secretName: satosa-runtime-secrets

- name: Restart Satosa now
  shell:
    cmd: |-
      oc -n {{ openshift_namespace }} rollout latest dc/{{ sativa_deploy_name }}
  when: >-
    ("sativa.satosa.restart" in ansible_run_tags)
    or
    ( (_satosa_configmap | default({})) is changed )
    or
    ( (_satosa_secret | default({})) is changed )
  tags:
    - sativa.satosa.restart

- name: Service for Satosa
  openshift:
    apiVersion: v1
    kind: Service
    metadata:
      name: satosa-service
      namespace: "{{ openshift_namespace }}"
      labels:
        app: satosa-service
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8000
      selector:
        deployment-config.name: '{{ sativa_deploy_name }}'

- name: Route for catalyse-login
  openshift:
    apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: "satosa-route"
      namespace: "{{ openshift_namespace }}"
      labels:
        app: satosa-route
        epfl.ch/visibility: public
    spec:
      host: "{{ sativa_server_hostname }}"
      tls:
        termination: edge
      port:
        targetPort: 8080-tcp
      to:
        kind: Service
        name: satosa-service
      wildcardPolicy: None
